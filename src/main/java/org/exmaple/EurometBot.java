package org.exmaple;

import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.TelegramBotsApi;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import org.telegram.telegrambots.updatesreceivers.DefaultBotSession;

import java.util.*;

public class EurometBot extends TelegramLongPollingBot {

    private final Map<Long, String> userState = new HashMap<>();
    private final Map<Long, Map<String, String>> userForm = new HashMap<>();

    private static final List<String> MANAGER_IDS = Arrays.asList("your id", "your id");

    @Override
    public String getBotToken() {
        return "Your token";
    }

    @Override
    public String getBotUsername() {
        return "EurometMykolaivBot";
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage()) {
            Message message = update.getMessage();
            if (message.getNewChatMembers() != null && !message.getNewChatMembers().isEmpty()) {
                handleNewChatMembers(message);
                return;
            }
            if (message.hasText()) {
                handleMessage(message);
            }
        } else if (update.hasCallbackQuery()) {
            handleCallback(update);
        }
    }

    private void handleNewChatMembers(Message message) {
        Long chatId = message.getChatId();
        message.getNewChatMembers().forEach(user -> {
            String firstName = user.getFirstName() != null ? user.getFirstName() : "üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—É";
            String welcomeText = "üëã –ü—Ä–∏–≤—ñ—Ç, *" + firstName + "*!\n\n" +
                    "–í–∞—Å —â–æ–π–Ω–æ –¥–æ–¥–∞–Ω–æ –¥–æ –≥—Ä—É–ø–∏ *–¢–û–í –Ñ–≤—Ä–æ–º–µ—Ç-–ú–∏–∫–æ–ª–∞—ó–≤* üõ´\n" ;

            sendMessage(chatId, welcomeText);
            sendWelcome(chatId); // –∑–∞–ø—É—Å–∫ –∞–Ω–∫–µ—Ç–∏
        });
    }

    private void handleMessage(Message message) {
        Long chatId = message.getChatId();
        String text = message.getText();

        if ("/start".equals(text)) {
            sendWelcome(chatId);
            return;
        }

        if (userState.containsKey(chatId)) {
            String state = userState.get(chatId);

            if (state.equals("contact_message")) {
                for (String id : MANAGER_IDS) {
                    String msg = "üìû –ó–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞:\n\n" +
                            "üí¨ " + text + "\n\n" +
                            "üîó Telegram: [–ø–µ—Ä–µ–π—Ç–∏](tg://user?id=" + chatId + ")";
                    sendMessage(Long.valueOf(id), msg);
                }
                sendMessage(chatId, "‚úÖ –í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É. –û—á—ñ–∫—É–π—Ç–µ –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å.");
                userState.remove(chatId);
                return;
            }

            if (state.startsWith("replying_to_")) {
                String targetId = state.replace("replying_to_", "");
                sendMessage(Long.valueOf(targetId), "üì© *–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:*\n\n" + text);
                sendMessage(chatId, "‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–ª—ñ—î–Ω—Ç—É.");
                userState.remove(chatId);
                return;
            }

            Map<String, String> form = userForm.getOrDefault(chatId, new LinkedHashMap<>());

            switch (state) {
                case "sale_company": case "cost_company":
                    form.put("üè¢ –ù–∞–∑–≤–∞ –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–∞", text);
                    sendNext(chatId, "üìã –Ø–∫—â–æ –ø–∞–º º—è—Ç–∞—î—Ç–µ, –≤–∫–∞–∂—ñ—Ç—å –∫–æ–¥ –Ñ–î–†–ü–û–£:", state.replace("company", "code"));
                    break;
                case "sale_code": case "cost_code":
                    form.put("üìã –ö–æ–¥ –Ñ–î–†–ü–û–£", text);
                    sendNext(chatId, "üìç –ê–¥—Ä–µ—Å–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è:", state.replace("code", "address"));
                    break;
                case "sale_address": case "cost_address":
                    form.put("üìç –ê–¥—Ä–µ—Å–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è", text);
                    sendCropOptions(chatId);
                    userState.put(chatId, state.replace("address", "crop"));
                    break;
                case "sale_volume": case "cost_volume":
                    form.put("üìà –û–± º—î–º (—Ç)", text);
                    sendNext(chatId, "üåæ –†—ñ–∫ —É—Ä–æ–∂–∞—é:", state.replace("volume", "year"));
                    break;
                case "sale_year": case "cost_year":
                    form.put("üåæ –†—ñ–∫ —É—Ä–æ–∂–∞—é", text);
                    sendDeliveryOptions(chatId);
                    userState.put(chatId, state.replace("year", "delivery"));
                    break;
                case "sale_comment": case "cost_comment":
                    form.put("üìù –ö–æ–º–µ–Ω—Ç–∞—Ä", text);
                    sendNext(chatId, "üë®‚Äçüíº –ü–Ü–ë –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–æ—ó –æ—Å–æ–±–∏:", state.replace("comment", "name"));
                    break;
                case "sale_name": case "cost_name":
                    form.put("üë®‚Äçüíº –ü–Ü–ë", text);
                    sendNext(chatId, "‚òéÔ∏è –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:", state.replace("name", "phone"));
                    break;
                case "sale_phone": case "cost_phone":
                    form.put("‚òéÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω", text);
                    sendFormResult(chatId, form);
                    break;
            }
            userForm.put(chatId, form);
        }
    }

    private void handleCallback(Update update) {
        String data = update.getCallbackQuery().getData();
        Long chatId = update.getCallbackQuery().getMessage().getChatId();

        if (data.startsWith("reply_to_")) {
            String targetId = data.replace("reply_to_", "");
            userState.put(chatId, "replying_to_" + targetId);
            sendMessage(chatId, "‚úçÔ∏è –í–≤–µ–¥—ñ—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞:");
            return;
        }

        switch (data) {
            case "sale":
                userState.put(chatId, "sale_company");
                userForm.put(chatId, new LinkedHashMap<>());
                sendMessage(chatId, "üìã –†–æ–∑–ø–æ—á–Ω–µ–º–æ –∞–Ω–∫–µ—Ç—É –¥–ª—è *–ø—Ä–æ–¥–∞–∂—É*.\n\n‚úçÔ∏è –í–≤–µ–¥—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, *–Ω–∞–∑–≤—É –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–∞*:");
                break;
            case "cost":
                userState.put(chatId, "cost_company");
                userForm.put(chatId, new LinkedHashMap<>());
                sendMessage(chatId, "üí∞ –†–æ–∑–ø–æ—á–Ω–µ–º–æ –∞–Ω–∫–µ—Ç—É –¥–ª—è *–ø—Ä–æ—Ä–∞—Ö—É–Ω–∫—É –≤–∞—Ä—Ç–æ—Å—Ç—ñ*.\n\n‚úçÔ∏è –í–≤–µ–¥—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, *–Ω–∞–∑–≤—É –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–∞*:");
                break;
            case "contact":
                InlineKeyboardMarkup contactMarkup = InlineKeyboardMarkup.builder().keyboard(Arrays.asList(
                        Arrays.asList(
                                InlineKeyboardButton.builder()
                                        .text("üì© –ù–∞–ø–∏—Å–∞—Ç–∏ —á–µ—Ä–µ–∑ –±–æ—Ç–∞")
                                        .callbackData("reply_to_manager").build()
                        ),
                        Arrays.asList(
                                InlineKeyboardButton.builder()
                                        .text("üí¨ –ù–∞–ø–∏—Å–∞—Ç–∏ –Ω–∞–ø—Ä—è–º—É –≤ Telegram")
                                        .url("https://t.me/ArkhypenkoV").build()
                        )
                )).build();

                sendMessageWithMarkup(chatId,
                        "–ó–≤ º—è–∂—ñ—Ç—å—Å—è –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º *–í—ñ–∫—Ç–æ—Ä—ñ—è* –æ–¥–Ω–∏–º –∑—ñ —Å–ø–æ—Å–æ–±—ñ–≤ –Ω–∏–∂—á–µ:", contactMarkup);
                break;

            case "delivery_place":
                completeDelivery(chatId, "–ü—Ä–æ–¥–∞–∂ –∑ –º—ñ—Å—Ü—è");
                break;
            case "delivery_port":
                completeDelivery(chatId, "–î–æ—Å—Ç–∞–≤–∫–∞ –≤ –ø–æ—Ä—Ç");
                break;
            default:
                if (data.startsWith("crop_")) {
                    String crop = data.substring(5).replace("_", " ");
                    Map<String, String> form = userForm.getOrDefault(chatId, new LinkedHashMap<>());
                    form.put("–ö—É–ª—å—Ç—É—Ä–∞", crop);
                    userForm.put(chatId, form);
                    String current = userState.get(chatId);
                    userState.put(chatId, current.replace("crop", "volume"));
                    sendMessage(chatId, "–û–± º—î–º (—É —Ç–æ–Ω–Ω–∞—Ö):");
                }
                break;
        }
    }

    private void completeDelivery(Long chatId, String option) {
        Map<String, String> form = userForm.getOrDefault(chatId, new LinkedHashMap<>());
        form.put("–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏", option);
        userForm.put(chatId, form);
        String current = userState.get(chatId);
        userState.put(chatId, current.replace("delivery", "comment"));
        sendMessage(chatId, "–ö–æ–º–µ–Ω—Ç–∞—Ä (–∑–∞ –ø–æ—Ç—Ä–µ–±–∏):");
    }

    private void sendDeliveryOptions(Long chatId) {
        InlineKeyboardMarkup markup = InlineKeyboardMarkup.builder().keyboard(Arrays.asList(
                Arrays.asList(
                        InlineKeyboardButton.builder().text("üè† –ü—Ä–æ–¥–∞–∂ –∑ –º—ñ—Å—Ü—è").callbackData("delivery_place").build(),
                        InlineKeyboardButton.builder().text("‚öì –î–æ—Å—Ç–∞–≤–∫–∞ –≤ –ø–æ—Ä—Ç").callbackData("delivery_port").build()
                )
        )).build();

        sendMessageWithMarkup(chatId, "–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏:", markup);
    }

    private void sendCropOptions(Long chatId) {
        String[][] crops = {
                {"üåæ –ü—à–µ–Ω–∏—Ü—è 2 –ö–ª", "üåæ –ü—à–µ–Ω–∏—Ü—è 3 –ö–ª"},
                {"üåæ –ü—à–µ–Ω–∏—Ü—è 4 –ö–ª", "üåø –Ø—á–º—ñ–Ω—å"},
                {"üåΩ –ö—É–∫—É—Ä—É–¥–∑–∞", "ü•ò –°–æ—è –ì–ú–û"},
                {"ü•ò –°–æ—è –±–µ–∑ –ì–ú–û", "üî† –†—ñ–ø–∞–∫ –ì–ú–û"},
                {"üî† –†—ñ–ø–∞–∫ –±–µ–∑ –ì–ú–û", "üü¢ –ì–æ—Ä–æ—Ö"},
                {"üåõ –°–æ–Ω—è—à–Ω–∏–∫"}
        };

        List<List<InlineKeyboardButton>> rows = new ArrayList<>();
        for (String[] row : crops) {
            List<InlineKeyboardButton> btns = new ArrayList<>();
            for (String item : row) {
                btns.add(InlineKeyboardButton.builder().text(item).callbackData("crop_" + item).build());
            }
            rows.add(btns);
        }

        sendMessageWithMarkup(chatId, "üåæ *–û–±–µ—Ä—ñ—Ç—å –∫—É–ª—å—Ç—É—Ä—É:*", InlineKeyboardMarkup.builder().keyboard(rows).build());
    }

    private void sendWelcome(Long chatId) {
        InlineKeyboardMarkup markup = InlineKeyboardMarkup.builder().keyboard(Arrays.asList(
                Arrays.asList(InlineKeyboardButton.builder().text("üìú –ü—Ä–æ–¥–∞–∂").callbackData("sale").build()),
                Arrays.asList(InlineKeyboardButton.builder().text("üí∞ –ü—Ä–æ—Ä–∞—Ö—É–Ω–æ–∫ –≤–∞—Ä—Ç–æ—Å—Ç—ñ").callbackData("cost").build()),
                Arrays.asList(InlineKeyboardButton.builder().text("üìû –ó–≤'—è–∑–æ–∫ –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º").callbackData("contact").build())
        )).build();

        sendMessageWithMarkup(chatId,
                "üëã –í–∞—Å –≤—ñ—Ç–∞—î –¢–û–í *–Ñ–≤—Ä–æ–º–µ—Ç-–ú–∏–∫–æ–ª–∞—ó–≤*!\n" +
                        "üë©‚Äçüíº –ú–µ–Ω–µ–¥–∂–µ—Ä: *–í—ñ–∫—Ç–æ—Ä—ñ—è*\n\n" +
                        "üîΩ –û–±–µ—Ä—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –æ–¥–Ω—É –∑ –¥—ñ–π:", markup);
    }

    private void sendFormResult(Long chatId, Map<String, String> form) {
        StringBuilder sb = new StringBuilder("–ù–∞–¥—ñ—Å–ª–∞–Ω—ñ –¥–∞–Ω—ñ:\n\n");
        form.forEach((k, v) -> sb.append(k).append(": ").append(v).append("\n"));

        sendMessage(chatId, "–î—è–∫—É—î–º–æ! –î–∞–Ω—ñ –ø–µ—Ä–µ–¥–∞–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É ‚úÖ");
        for (String id : MANAGER_IDS) {
            InlineKeyboardMarkup markup = InlineKeyboardMarkup.builder().keyboard(Arrays.asList(
                    Arrays.asList(InlineKeyboardButton.builder()
                            .text("‚úçÔ∏è –í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –∫–ª—ñ—î–Ω—Ç—É")
                            .callbackData("reply_to_" + chatId).build())
            )).build();

            sendMessageWithMarkup(Long.valueOf(id), "üì© –ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –∑ –±–æ—Ç–∞:\n\n" + sb, markup);
        }

        userState.remove(chatId);
        userForm.remove(chatId);
    }

    private void sendNext(Long chatId, String question, String nextState) {
        userState.put(chatId, nextState);
        sendMessage(chatId, question);
    }

    private void sendMessage(Long chatId, String text) {
        try {
            execute(SendMessage.builder()
                    .chatId(chatId.toString())
                    .text(text)
                    .parseMode("Markdown")
                    .build());
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void sendMessageWithMarkup(Long chatId, String text, InlineKeyboardMarkup markup) {
        try {
            execute(SendMessage.builder()
                    .chatId(chatId.toString())
                    .text(text)
                    .replyMarkup(markup)
                    .parseMode("Markdown")
                    .build());
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    public static void main(String[] args) throws TelegramApiException {
        TelegramBotsApi botsApi = new TelegramBotsApi(DefaultBotSession.class);
        botsApi.registerBot(new EurometBot());
    }
}
