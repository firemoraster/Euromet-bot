package org.exmaple;

import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.TelegramBotsApi;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import org.telegram.telegrambots.updatesreceivers.DefaultBotSession;

import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class EurometBot extends TelegramLongPollingBot {

    private final Map<Long, String> userState = new HashMap<>();
    private final Map<Long, Map<String, String>> userForm = new HashMap<>();
    private static final List<String> MANAGER_IDS = Arrays.asList("manager_id", "manager_id");

    @Override
    public String getBotToken() {
        return "Your token";
    }

    @Override
    public String getBotUsername() {
        return "EurometManager_Bot";
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage()) {
            Message msg = update.getMessage();
            Long chatId = msg.getChatId();

            // --- –ü–û–ß–ê–¢–û–ö –õ–û–ì–£–í–ê–ù–ù–Ø –î–õ–Ø –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ò ---
            System.out.println("------------------------------------");
            System.out.println("–û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:");
            System.out.println("Chat ID: " + chatId);
            System.out.println("Text: " + msg.getText());
            System.out.println("Is User Message (–ø—Ä–∏–≤–∞—Ç–Ω–∏–π —á–∞—Ç): " + msg.isUserMessage());
            System.out.println("Is Group Message: " + msg.isGroupMessage());
            System.out.println("Is SuperGroup Message: " + msg.isSuperGroupMessage());
            System.out.println("Has New Chat Members: " + (msg.getNewChatMembers() != null && !msg.getNewChatMembers().isEmpty()));
            // --- –ö–Ü–ù–ï–¶–¨ –õ–û–ì–£–í–ê–ù–ù–Ø –î–õ–Ø –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ò ---

            // 1) –û–±—Ä–æ–±–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–∏—Ö —É—á–∞—Å–Ω–∏–∫—ñ–≤ –¥–æ –ì–†–£–ü–ò (–≤–∫–ª—é—á–Ω–æ –∑ –±–æ—Ç–æ–º)
            if (msg.getNewChatMembers() != null && !msg.getNewChatMembers().isEmpty()) {
                System.out.println("-> –í–∏—è–≤–ª–µ–Ω–æ –Ω–æ–≤–∏—Ö —É—á–∞—Å–Ω–∏–∫—ñ–≤ —á–∞—Ç—É. –û–±—Ä–æ–±–∫–∞ –≤—ñ—Ç–∞–Ω–Ω—è –≥—Ä—É–ø–∏.");
                msg.getNewChatMembers().forEach(user -> {
                    try {
                        sendGroupWelcome(chatId); // –ù–∞–¥—Å–∏–ª–∞—î–º–æ –≥—Ä—É–ø–æ–≤–µ –≤—ñ—Ç–∞–ª—å–Ω–µ –º–µ–Ω—é –∑ inline –∫–Ω–æ–ø–∫–∞–º–∏
                    } catch (TelegramApiException e) {
                        throw new RuntimeException(e);
                    }
                });
                System.out.println("<- –ó–∞–≤–µ—Ä—à–µ–Ω–æ –æ–±—Ä–æ–±–∫—É –Ω–æ–≤–∏—Ö —É—á–∞—Å–Ω–∏–∫—ñ–≤.");
                return;
            }

            // 2) –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /start
            if (msg.hasText() && msg.getText().startsWith("/start")) {
                System.out.println("-> –í–∏—è–≤–ª–µ–Ω–æ –∫–æ–º–∞–Ω–¥—É /start.");
                if (msg.isGroupMessage() || msg.isSuperGroupMessage()) {
                    System.out.println("--> –¶–µ –∫–æ–º–∞–Ω–¥–∞ /start —É –ì–†–£–ü–û–í–û–ú–£ —á–∞—Ç—ñ.");
                    String botUsernameWithAt = "@" + getBotUsername();
                    if (msg.getText().equals("/start") || msg.getText().equals("/start" + botUsernameWithAt)) {
                        System.out.println("--> –ù–∞–¥—Å–∏–ª–∞—î–º–æ –≥—Ä—É–ø–æ–≤–µ –≤—ñ—Ç–∞–ª—å–Ω–µ –º–µ–Ω—é (sendGroupWelcome) –≤ –≥—Ä—É–ø—É.");
                        try {
                            sendGroupWelcome(chatId);
                        } catch (TelegramApiException e) {
                            throw new RuntimeException(e);
                        }
                    } else {
                        System.out.println("--> –¶–µ deep link /start —É –≥—Ä—É–ø—ñ. –Ü–≥–Ω–æ—Ä—É—î–º–æ.");
                    }
                    System.out.println("<- –ó–∞–≤–µ—Ä—à–µ–Ω–æ –æ–±—Ä–æ–±–∫—É –≥—Ä—É–ø–æ–≤–æ–≥–æ /start.");
                    return;
                } else if (msg.isUserMessage()) {
                    System.out.println("--> –¶–µ –∫–æ–º–∞–Ω–¥–∞ /start —É –ü–†–ò–í–ê–¢–ù–û–ú–£ —á–∞—Ç—ñ. –ü–µ—Ä–µ–¥–∞—î–º–æ –≤ handlePrivateMessage.");
                    handlePrivateMessage(msg);
                    System.out.println("<- –ó–∞–≤–µ—Ä—à–µ–Ω–æ –æ–±—Ä–æ–±–∫—É –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ /start.");
                    return;
                }
            }

            // 3) –û–±—Ä–æ–±–∫–∞ —ñ–Ω—à–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å.
            if (msg.isUserMessage()) {
                System.out.println("-> –¶–µ —ñ–Ω—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –ü–†–ò–í–ê–¢–ù–û–ú–£ —á–∞—Ç—ñ. –ü–µ—Ä–µ–¥–∞—î–º–æ –≤ handlePrivateMessage.");
                handlePrivateMessage(msg);
                System.out.println("<- –ó–∞–≤–µ—Ä—à–µ–Ω–æ –æ–±—Ä–æ–±–∫—É —ñ–Ω—à–æ–≥–æ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.");
            } else {
                System.out.println("-> –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –≥—Ä—É–ø–æ–≤–æ–º—É —á–∞—Ç—ñ (–Ω–µ /start —ñ –Ω–µ –Ω–æ–≤–∏–π —É—á–∞—Å–Ω–∏–∫).");
            }
            System.out.println("------------------------------------");
        } else if (update.hasCallbackQuery()) {
            System.out.println("------------------------------------");
            System.out.println("–û—Ç—Ä–∏–º–∞–Ω–æ CallbackQuery. –ü–µ—Ä–µ–¥–∞—î–º–æ –≤ handleCallback.");
            handleCallback(update);
            System.out.println("------------------------------------");
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –≤—ñ—Ç–∞–ª—å–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –ì–†–£–ü–û–í–ò–ô —á–∞—Ç –∑ inline –∫–Ω–æ–ø–∫–∞–º–∏
    private void sendGroupWelcome(Long chatId) throws TelegramApiException {
        System.out.println("--- sendGroupWelcome –≤–∏–∫–ª–∏–∫–∞–Ω–æ –¥–ª—è chatId: " + chatId + " ---");
        InlineKeyboardMarkup markup = InlineKeyboardMarkup.builder().keyboard(Arrays.asList(
                Arrays.asList(
                        InlineKeyboardButton.builder()
                                .text("üìú –ü—Ä–æ–¥–∞–∂ –∑–µ—Ä–Ω–∞")
                                .url("https://t.me/" + getBotUsername() + "?start=sale")
                                .build()
                ),
                Arrays.asList(
                        InlineKeyboardButton.builder()
                                .text("üí∞ –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤–∞—Ä—Ç–æ—Å—Ç—ñ")
                                .url("https://t.me/" + getBotUsername() + "?start=cost")
                                .build()
                ),
                Arrays.asList(
                        InlineKeyboardButton.builder()
                                .text("üìû –ó–≤'—è–∑–æ–∫ –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º")
                                .url("https://t.me/" + getBotUsername() + "?start=contact")
                                .build()
                )
        )).build();

        execute(SendMessage.builder()
                .chatId(chatId.toString())
                .text("üëã *–í–∞—Å –≤—ñ—Ç–∞—î –Ñ–≤—Ä–æ–º–µ—Ç-–ú–∏–∫–æ–ª–∞—ó–≤!*\n\n" +
                        "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –æ–¥–Ω—É –∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂—á–µ, —â–æ–± –ø–µ—Ä–µ–π—Ç–∏ –¥–æ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —á–∞—Ç—É –∑ –±–æ—Ç–æ–º —ñ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏:")
                .replyMarkup(markup)
                .parseMode("Markdown")
                .build()
        );
        System.out.println("--- sendGroupWelcome –∑–∞–≤–µ—Ä—à–µ–Ω–æ. ---");
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –≤—ñ—Ç–∞–ª—å–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –ì–†–£–ü–£, –∫–æ–ª–∏ –ø—Ä–∏—î–¥–Ω—É—î—Ç—å—Å—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
    private void sendUserWelcome(Long chatId, org.telegram.telegrambots.meta.api.objects.User user) throws TelegramApiException {
        System.out.println("--- sendUserWelcome –≤–∏–∫–ª–∏–∫–∞–Ω–æ –¥–ª—è chatId: " + chatId + " (–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á: " + user.getFirstName() + ") ---");
        sendGroupWelcome(chatId); // –ù–∞–¥—Å–∏–ª–∞—î–º–æ –≤—ñ—Ç–∞–ª—å–Ω–µ –º–µ–Ω—é –∑ inline –∫–Ω–æ–ø–∫–∞–º–∏ –≤ –≥—Ä—É–ø—É –ø—Ä–∏ –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        System.out.println("--- sendUserWelcome –∑–∞–≤–µ—Ä—à–µ–Ω–æ. ---");
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —É –ü–†–ò–í–ê–¢–ù–û–ú–£ —á–∞—Ç—ñ
    private void handlePrivateMessage(Message message) {
        Long chatId = message.getChatId();
        String text = message.getText();
        System.out.println("--- handlePrivateMessage –≤–∏–∫–ª–∏–∫–∞–Ω–æ –¥–ª—è chatId: " + chatId + ", —Ç–µ–∫—Å—Ç: '" + text + "' ---");

        // –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /start —É –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É —á–∞—Ç—ñ
        if (text.startsWith("/start")) {
            System.out.println("-> –û–±—Ä–æ–±–∫–∞ /start –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É —á–∞—Ç—ñ.");
            String[] parts = text.split(" ");
            String startParam = null;
            if (parts.length > 1) { // –¶–µ /start –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º (–≥–ª–∏–±–æ–∫–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è), –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ /start sale
                startParam = parts[1];
                System.out.println("--> /start –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º: " + startParam);
            } else { // –¶–µ –ø—Ä–æ—Å—Ç–æ /start –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ (–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —Å–∞–º –Ω–∞–±—Ä–∞–≤ /start)
                System.out.println("--> –ü—Ä–æ—Å—Ç–æ /start.");
            }

            // –ó–∞–≤–∂–¥–∏ –ø–æ–∫–∞–∑—É—î–º–æ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –∑ ReplyKeyboardMarkup
            showMainMenu(chatId);

            // –Ø–∫—â–æ –±—É–≤ –ø–∞—Ä–∞–º–µ—Ç—Ä, –∑–∞–ø—É—Å–∫–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É –¥—ñ—é –ø—ñ—Å–ª—è –ø–æ–∫–∞–∑—É –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
            if (startParam != null) {
                switch (startParam) {
                    case "sale":
                        startSaleForm(chatId);
                        break;
                    case "cost":
                        startCostForm(chatId);
                        break;
                    case "contact":
                        showContactOptions(chatId);
                        break;
                    default:
                        System.out.println("--> –ù–µ–≤—ñ–¥–æ–º–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä /start. –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –≤–∂–µ –ø–æ–∫–∞–∑–∞–Ω–æ.");
                }
            }
            System.out.println("<- –ó–∞–≤–µ—Ä—à–µ–Ω–æ –æ–±—Ä–æ–±–∫—É /start –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É —á–∞—Ç—ñ.");
            return;
        }

        // –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω—å –Ω–∞ –∫–Ω–æ–ø–∫–∏ ReplyKeyboardMarkup (–Ω–∏–∂–Ω—ñ –∫–Ω–æ–ø–∫–∏)
        if ("üìú –ü—Ä–æ–¥–∞–∂ –∑–µ—Ä–Ω–∞".equals(text)) {
            System.out.println("-> –ù–∞—Ç–∏—Å–Ω—É—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–ü—Ä–æ–¥–∞–∂ –∑–µ—Ä–Ω–∞'.");
            startSaleForm(chatId);
            return;
        }
        if ("üí∞ –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤–∞—Ä—Ç–æ—Å—Ç—ñ".equals(text)) {
            System.out.println("-> –ù–∞—Ç–∏—Å–Ω—É—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤–∞—Ä—Ç–æ—Å—Ç—ñ'.");
            startCostForm(chatId);
            return;
        }
        if ("üìû –ó–≤'—è–∑–æ–∫ –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º".equals(text)) {
            System.out.println("-> –ù–∞—Ç–∏—Å–Ω—É—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–ó–≤'—è–∑–æ–∫ –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º'.");
            showContactOptions(chatId);
            return;
        }

        // –û–±—Ä–æ–±–∫–∞ —Å—Ç–∞–Ω—ñ–≤: –∞–Ω–∫–µ—Ç–∞, –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –º–µ–Ω–µ–¥–∂–µ—Ä—É —Ç–æ—â–æ
        if (userState.containsKey(chatId)) {
            String state = userState.get(chatId);
            System.out.println("-> –û–±—Ä–æ–±–∫–∞ —Å—Ç–∞–Ω—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: " + state);

            if ("contact_message".equals(state)) {
                MANAGER_IDS.forEach(id -> {
                    String msg = "üìû –ó–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞:\n\nüí¨ " + text;
                    InlineKeyboardMarkup m = InlineKeyboardMarkup.builder().keyboard(Arrays.asList(
                            Arrays.asList(
                                    InlineKeyboardButton.builder()
                                            .text("‚úçÔ∏è –í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ —á–µ—Ä–µ–∑ –±–æ—Ç–∞")
                                            .callbackData("reply_to_" + chatId).build(),
                                    InlineKeyboardButton.builder()
                                            .text("üîó –ü–µ—Ä–µ–π—Ç–∏ –≤ Telegram")
                                            .url("tg://user?id=" + chatId).build()
                            )
                    )).build();
                    sendMessageWithMarkup(Long.valueOf(id), msg, m);
                });
                sendMessage(chatId, "‚úÖ –í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É. –û—á—ñ–∫—É–π—Ç–µ –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å.");
                userState.remove(chatId);
                showMainMenu(chatId);
                return;
            }

            if (state.startsWith("replying_to_")) {
                String targetId = state.substring("replying_to_".length());
                sendMessage(Long.valueOf(targetId), "üì© *–í—ñ–¥ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:*\n\n" + text);
                sendMessage(chatId, "‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–ª—ñ—î–Ω—Ç—É.");
                userState.remove(chatId);
                showMainMenu(chatId);
                return;
            }

            // –ê–Ω–∫–µ—Ç–∞ (sale_* / cost_*)
            Map<String, String> form = userForm.getOrDefault(chatId, new LinkedHashMap<>());
            switch (state) {
                case "sale_company":
                case "cost_company":
                    form.put("üè¢ –ù–∞–∑–≤–∞ –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–∞", text);
                    sendNext(chatId, "üìã –Ø–∫—â–æ –ø–∞–º‚Äô—è—Ç–∞—î—Ç–µ, –≤–∫–∞–∂—ñ—Ç—å –∫–æ–¥ –Ñ–î–†–ü–û–£:", state.replace("company", "code"));
                    break;
                case "sale_code":
                case "cost_code":
                    form.put("üìã –ö–æ–¥ –Ñ–î–†–ü–û–£", text);
                    sendNext(chatId, "üìç –ê–¥—Ä–µ—Å–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è:", state.replace("code", "address"));
                    break;
                case "sale_address":
                case "cost_address":
                    form.put("üìç –ê–¥—Ä–µ—Å–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è", text);
                    sendCropOptions(chatId);
                    userState.put(chatId, state.replace("address", "crop"));
                    break;
                case "sale_volume":
                case "cost_volume":
                    form.put("üìà –û–±‚Äô—î–º (—Ç)", text);
                    sendNext(chatId, "üåæ –†—ñ–∫ —É—Ä–æ–∂–∞—é:", state.replace("volume", "year"));
                    break;
                case "sale_year":
                case "cost_year":
                    form.put("üåæ –†—ñ–∫ —É—Ä–æ–∂–∞—é", text);
                    sendDeliveryOptions(chatId);
                    userState.put(chatId, state.replace("year", "delivery"));
                    break;
                case "sale_comment":
                case "cost_comment":
                    form.put("üìù –ö–æ–º–µ–Ω—Ç–∞—Ä", text);
                    sendNext(chatId, "üë®‚Äçüíº –ü–Ü–ë –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–æ—ó –æ—Å–æ–±–∏:", state.replace("comment", "name"));
                    break;
                case "sale_name":
                case "cost_name":
                    form.put("üë®‚Äçüíº –ü–Ü–ë", text);
                    sendNext(chatId, "‚òéÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω:", state.replace("name", "phone"));
                    break;
                case "sale_phone":
                case "cost_phone":
                    form.put("‚òéÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω", text);
                    sendFormResult(chatId, form);
                    break;
            }
            userForm.put(chatId, form);
        } else {
            System.out.println("-> –ù–µ–≤—ñ–¥–æ–º–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–±–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏–π —Å—Ç–∞–Ω. –ü–æ–∫–∞–∑—É—î–º–æ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.");
            showMainMenu(chatId);
        }
        System.out.println("--- handlePrivateMessage –∑–∞–≤–µ—Ä—à–µ–Ω–æ. ---");
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω—å –Ω–∞ Inline –∫–Ω–æ–ø–∫–∏ (—è–∫—ñ –ø—Ä–∏—Ö–æ–¥—è—Ç—å —è–∫ CallbackQuery)
    private void handleCallback(Update update) {
        String data = update.getCallbackQuery().getData();
        Long chatId = update.getCallbackQuery().getMessage().getChatId();
        System.out.println("--- handleCallback –≤–∏–∫–ª–∏–∫–∞–Ω–æ –¥–ª—è chatId: " + chatId + ", –¥–∞–Ω—ñ: '" + data + "' ---");

        if ("reply_to_manager".equals(data)) {
            System.out.println("-> Callback: reply_to_manager.");
            userState.put(chatId, "contact_message");
            sendMessage(chatId, "‚úçÔ∏è –í–≤–µ–¥—ñ—Ç—å –í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞:");
            return;
        }

        if (data.startsWith("reply_to_")) {
            String targetId = data.replace("reply_to_", "");
            if (targetId.matches("\\d+")) {
                System.out.println("-> Callback: replying to client " + targetId);
                userState.put(chatId, "replying_to_" + targetId);
                sendMessage(chatId, "‚úçÔ∏è –í–≤–µ–¥—ñ—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞:");
                return;
            }
        }

        switch (data) {
            case "sale":
                System.out.println("-> Callback: sale. –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ñ–æ—Ä–º—É –ø—Ä–æ–¥–∞–∂—É.");
                // –¢—É—Ç –º–∏ –≤–∂–µ –∑–Ω–∞—Ö–æ–¥–∏–º–æ—Å—è –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É —á–∞—Ç—ñ, –º–µ–Ω—é –∑–Ω–∏–∑—É –≤–∂–µ –º–∞—î –±—É—Ç–∏
                startSaleForm(chatId);
                break;
            case "cost":
                System.out.println("-> Callback: cost. –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ñ–æ—Ä–º—É –≤–∞—Ä—Ç–æ—Å—Ç—ñ.");
                startCostForm(chatId);
                break;
            case "contact":
                System.out.println("-> Callback: contact. –ü–æ–∫–∞–∑—É—î–º–æ –æ–ø—Ü—ñ—ó –∫–æ–Ω—Ç–∞–∫—Ç—É.");
                showContactOptions(chatId);
                break;
            case "delivery_place":
                System.out.println("-> Callback: delivery_place.");
                completeDelivery(chatId, "–ü—Ä–æ–¥–∞–∂ –∑ –º—ñ—Å—Ü—è");
                break;
            case "delivery_port":
                System.out.println("-> Callback: delivery_port.");
                completeDelivery(chatId, "–î–æ—Å—Ç–∞–≤–∫–∞ –≤ –ø–æ—Ä—Ç");
                break;
            default:
                if (data.startsWith("crop_")) {
                    System.out.println("-> Callback: crop selection.");
                    String crop = data.substring(5).replace("_", " ");
                    Map<String, String> form = userForm.getOrDefault(chatId, new LinkedHashMap<>());
                    form.put("–ö—É–ª—å—Ç—É—Ä–∞", crop);
                    userForm.put(chatId, form);
                    String current = userState.get(chatId);
                    userState.put(chatId, current.replace("crop", "volume"));
                    sendMessage(chatId, "–û–± º—î–º (—É —Ç–æ–Ω–Ω–∞—Ö):");
                } else {
                    System.out.println("-> Callback: Unknown data.");
                }
                break;
        }
        System.out.println("--- handleCallback –∑–∞–≤–µ—Ä—à–µ–Ω–æ. ---");
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –∑ ReplyKeyboardMarkup (–Ω–∏–∂–Ω—ñ –∫–Ω–æ–ø–∫–∏)
    private void showMainMenu(Long chatId) {
        System.out.println("--- showMainMenu –≤–∏–∫–ª–∏–∫–∞–Ω–æ –¥–ª—è chatId: " + chatId + " ---");
        ReplyKeyboardMarkup replyKeyboardMarkup = new ReplyKeyboardMarkup();
        replyKeyboardMarkup.setSelective(true);
        replyKeyboardMarkup.setResizeKeyboard(true);
        replyKeyboardMarkup.setOneTimeKeyboard(false);

        List<KeyboardRow> keyboard = new ArrayList<>();

        KeyboardRow row1 = new KeyboardRow();
        row1.add(new KeyboardButton("üìú –ü—Ä–æ–¥–∞–∂ –∑–µ—Ä–Ω–∞"));
        keyboard.add(row1);

        KeyboardRow row2 = new KeyboardRow();
        row2.add(new KeyboardButton("üí∞ –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤–∞—Ä—Ç–æ—Å—Ç—ñ"));
        keyboard.add(row2);

        KeyboardRow row3 = new KeyboardRow();
        row3.add(new KeyboardButton("üìû –ó–≤'—è–∑–æ–∫ –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"));
        keyboard.add(row3);

        replyKeyboardMarkup.setKeyboard(keyboard);

        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText("üëã –í–∞—Å –≤—ñ—Ç–∞—î *–Ñ–≤—Ä–æ–º–µ—Ç-–ú–∏–∫–æ–ª–∞—ó–≤*!\nüë©‚Äçüíº –ú–µ–Ω–µ–¥–∂–µ—Ä: *–í—ñ–∫—Ç–æ—Ä—ñ—è*\n\n–û–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—É –¥—ñ—é:");
        message.setReplyMarkup(replyKeyboardMarkup);
        message.setParseMode("Markdown");

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
        System.out.println("--- showMainMenu –∑–∞–≤–µ—Ä—à–µ–Ω–æ. ---");
    }

    private void startSaleForm(Long chatId) {
        System.out.println("--- startSaleForm –≤–∏–∫–ª–∏–∫–∞–Ω–æ –¥–ª—è chatId: " + chatId + " ---");
        userState.put(chatId, "sale_company");
        userForm.put(chatId, new LinkedHashMap<>());
        sendMessage(chatId, "üìã –†–æ–∑–ø–æ—á–Ω–µ–º–æ –∞–Ω–∫–µ—Ç—É –¥–ª—è *–ø—Ä–æ–¥–∞–∂—É –∑–µ—Ä–Ω–∞*.\n\n‚úçÔ∏è –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –≤–∞—à–æ–≥–æ –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–∞:");
        System.out.println("--- startSaleForm –∑–∞–≤–µ—Ä—à–µ–Ω–æ. ---");
    }

    private void startCostForm(Long chatId) {
        System.out.println("--- startCostForm –≤–∏–∫–ª–∏–∫–∞–Ω–æ –¥–ª—è chatId: " + chatId + " ---");
        userState.put(chatId, "cost_company");
        userForm.put(chatId, new LinkedHashMap<>());
        sendMessage(chatId, "üí∞ –†–æ–∑–ø–æ—á–Ω–µ–º–æ –∞–Ω–∫–µ—Ç—É –¥–ª—è *—Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –≤–∞—Ä—Ç–æ—Å—Ç—ñ*.\n\n‚úçÔ∏è –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –≤–∞—à–æ–≥–æ –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–∞:");
        System.out.println("--- startCostForm –∑–∞–≤–µ—Ä—à–µ–Ω–æ. ---");
    }

    private void showContactOptions(Long chatId) {
        System.out.println("--- showContactOptions –≤–∏–∫–ª–∏–∫–∞–Ω–æ –¥–ª—è chatId: " + chatId + " ---");
        InlineKeyboardMarkup markup = InlineKeyboardMarkup.builder().keyboard(Arrays.asList(
                Arrays.asList(
                        InlineKeyboardButton.builder()
                                .text("üì© –ù–∞–ø–∏—Å–∞—Ç–∏ —á–µ—Ä–µ–∑ –±–æ—Ç–∞")
                                .callbackData("reply_to_manager").build()
                ),
                Arrays.asList(
                        InlineKeyboardButton.builder()
                                .text("üí¨ –ù–∞–ø–∏—Å–∞—Ç–∏ –Ω–∞–ø—Ä—è–º—É –≤ Telegram")
                                .url("https://t.me/ArkhypenkoV").build()
                )
        )).build();

        sendMessageWithMarkup(chatId, "–ó–≤ º—è–∂—ñ—Ç—å—Å—è –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º *–í—ñ–∫—Ç–æ—Ä—ñ—è* –æ–¥–Ω–∏–º –∑—ñ —Å–ø–æ—Å–æ–±—ñ–≤:", markup);
        System.out.println("--- showContactOptions –∑–∞–≤–µ—Ä—à–µ–Ω–æ. ---");
    }

    private void completeDelivery(Long chatId, String option) {
        System.out.println("--- completeDelivery –≤–∏–∫–ª–∏–∫–∞–Ω–æ –¥–ª—è chatId: " + chatId + ", –æ–ø—Ü—ñ—è: " + option + " ---");
        Map<String, String> form = userForm.getOrDefault(chatId, new LinkedHashMap<>());
        form.put("–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏", option);
        userForm.put(chatId, form);
        String current = userState.get(chatId);
        userState.put(chatId, current.replace("delivery", "comment"));
        sendMessage(chatId, "üìù –í–≤–µ–¥—ñ—Ç—å –¥–æ–¥–∞—Ç–∫–æ–≤–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ):");
        System.out.println("--- completeDelivery –∑–∞–≤–µ—Ä—à–µ–Ω–æ. ---");
    }

    private void sendCropOptions(Long chatId) {
        System.out.println("--- sendCropOptions –≤–∏–∫–ª–∏–∫–∞–Ω–æ –¥–ª—è chatId: " + chatId + " ---");
        String[][] crops = {
                {"üåæ –ü—à–µ–Ω–∏—Ü—è 2 –∫–ª–∞—Å—É", "üåæ –ü—à–µ–Ω–∏—Ü—è 3 –∫–ª–∞—Å—É"},
                {"üåæ –ü—à–µ–Ω–∏—Ü—è 4 –∫–ª–∞—Å—É", "üåø –Ø—á–º—ñ–Ω—å"},
                {"üåΩ –ö—É–∫—É—Ä—É–¥–∑–∞", "ü•ò –°–æ—è –ì–ú–û"},
                {"ü•ò –°–æ—è –±–µ–∑ –ì–ú–û", "üî† –†—ñ–ø–∞–∫ –ì–ú–û"},
                {"üî† –†—ñ–ø–∞–∫ –±–µ–∑ –ì–ú–û", "üü¢ –ì–æ—Ä–æ—Ö"},
                {"üåª –°–æ–Ω—è—à–Ω–∏–∫"}
        };

        List<List<InlineKeyboardButton>> rows = new ArrayList<>();
        for (String[] row : crops) {
            List<InlineKeyboardButton> btns = new ArrayList<>();
            for (String item : row) {
                btns.add(InlineKeyboardButton.builder()
                        .text(item)
                        .callbackData("crop_" + item.replace(" ", "_")).build());
            }
            rows.add(btns);
        }

        sendMessageWithMarkup(chatId, "üåæ –û–±–µ—Ä—ñ—Ç—å –∫—É–ª—å—Ç—É—Ä—É:",
                InlineKeyboardMarkup.builder().keyboard(rows).build());
        System.out.println("--- sendCropOptions –∑–∞–≤–µ—Ä—à–µ–Ω–æ. ---");
    }

    private void sendDeliveryOptions(Long chatId) {
        System.out.println("--- sendDeliveryOptions –≤–∏–∫–ª–∏–∫–∞–Ω–æ –¥–ª—è chatId: " + chatId + " ---");
        InlineKeyboardMarkup markup = InlineKeyboardMarkup.builder().keyboard(Arrays.asList(
                Arrays.asList(
                        InlineKeyboardButton.builder().text("üè† –ü—Ä–æ–¥–∞–∂ –∑ –º—ñ—Å—Ü—è").callbackData("delivery_place").build(),
                        InlineKeyboardButton.builder().text("‚öì –î–æ—Å—Ç–∞–≤–∫–∞ –≤ –ø–æ—Ä—Ç").callbackData("delivery_port").build()
                )
        )).build();

        sendMessageWithMarkup(chatId, "üöõ –û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏:", markup);
        System.out.println("--- sendDeliveryOptions –∑–∞–≤–µ—Ä—à–µ–Ω–æ. ---");
    }

    private void sendFormResult(Long chatId, Map<String, String> form) {
        System.out.println("--- sendFormResult –≤–∏–∫–ª–∏–∫–∞–Ω–æ –¥–ª—è chatId: " + chatId + " ---");
        StringBuilder sb = new StringBuilder("üìÑ *–î–∞–Ω—ñ –∑–∞—è–≤–∫–∏:*\n\n");
        form.forEach((k, v) -> sb.append("‚Ä¢ ").append(k).append(": ").append(v).append("\n"));

        sendMessage(chatId, "‚úÖ –î—è–∫—É—î–º–æ! –í–∞—à—ñ –¥–∞–Ω—ñ –ø–µ—Ä–µ–¥–∞–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É.");

        String state = userState.getOrDefault(chatId, "");
        String type = state.startsWith("cost_") ? "üîç *–ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤–∞—Ä—Ç–æ—Å—Ç—ñ*" : "üìú *–ó–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂ –∑–µ—Ä–Ω–∞*";
        String managerMessage = type + ":\n\n" + sb.toString();
        InlineKeyboardMarkup markup = InlineKeyboardMarkup.builder().keyboard(Arrays.asList(
                Arrays.asList(
                        InlineKeyboardButton.builder()
                                .text("‚úçÔ∏è –í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –∫–ª—ñ—î–Ω—Ç—É")
                                .callbackData("reply_to_" + chatId).build(),
                        InlineKeyboardButton.builder()
                                .text("üí¨ –í—ñ–¥–∫—Ä–∏—Ç–∏ —á–∞—Ç")
                                .url("tg://user?id=" + chatId).build()
                )
        )).build();

        MANAGER_IDS.forEach(managerId -> {
            sendMessageWithMarkup(Long.parseLong(managerId), managerMessage, markup);
        });

        userState.remove(chatId);
        userForm.remove(chatId);
        showMainMenu(chatId); // –¢—É—Ç showMainMenu –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è, –±–æ –∞–Ω–∫–µ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
        System.out.println("--- sendFormResult –∑–∞–≤–µ—Ä—à–µ–Ω–æ. ---");
    }

    private void sendNext(Long chatId, String question, String nextState) {
        System.out.println("--- sendNext –≤–∏–∫–ª–∏–∫–∞–Ω–æ –¥–ª—è chatId: " + chatId + ", –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Å—Ç–∞–Ω: " + nextState + " ---");
        userState.put(chatId, nextState);
        sendMessage(chatId, question);
        System.out.println("--- sendNext –∑–∞–≤–µ—Ä—à–µ–Ω–æ. ---");
    }

    private void sendMessage(Long chatId, String text) {
        try {
            execute(SendMessage.builder()
                    .chatId(chatId.toString())
                    .text(text)
                    .parseMode("Markdown")
                    .build());
        } catch (TelegramApiException e) {
            String err = e.getMessage() == null ? "" : e.getMessage();
            // –Ø–∫—â–æ –±–æ—Ç –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º –∞–±–æ –Ω–µ –º–∞—î –ø—Ä–∞–≤–∞ –ø–∏—Å–∞—Ç–∏ –≤ —Ü–µ–π —á–∞—Ç ‚Äì –ø—Ä–æ—Å—Ç–æ —ñ–≥–Ω–æ—Ä—É—î–º–æ
            if (err.contains("Forbidden")) {
                // ‚îÄ‚îÄ swallow silently ‚îÄ‚îÄ
            } else {
                // –í—Å—ñ —ñ–Ω—à—ñ –ø–æ–º–∏–ª–∫–∏ ‚Äì –∑–∞–ª–æ–≥—É–≤–∞—Ç–∏
                e.printStackTrace();
            }
        }
    }


    private void sendMessageWithMarkup(Long chatId, String text, InlineKeyboardMarkup markup) {
        try {
            execute(SendMessage.builder()
                    .chatId(chatId.toString())
                    .text(text)
                    .replyMarkup(markup)
                    .parseMode("Markdown")
                    .build());
        } catch (TelegramApiException e) {
            String err = e.getMessage() == null ? "" : e.getMessage();
            if (err.contains("Forbidden")) {
                // ‚îÄ‚îÄ swallow silently ‚îÄ‚îÄ
            } else {
                e.printStackTrace();
            }
        }
    }


    // –ú–µ—Ç–æ–¥ –¥–ª—è –µ–∫—Ä–∞–Ω—É–≤–∞–Ω–Ω—è —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤ MarkdownV2
    private String escapeMarkdown(String text) {
        String escapedText = text;
        escapedText = escapedText.replace("_", "\\_");
        escapedText = escapedText.replace("*", "\\*");
        escapedText = escapedText.replace("[", "\\[");
        escapedText = escapedText.replace("]", "\\]");
        escapedText = escapedText.replace("(", "\\(");
        escapedText = escapedText.replace(")", "\\)");
        escapedText = escapedText.replace("~", "\\~");
        escapedText = escapedText.replace("`", "\\`");
        escapedText = escapedText.replace(">", "\\>");
        escapedText = escapedText.replace("#", "\\#");
        escapedText = escapedText.replace("+", "\\+");
        escapedText = escapedText.replace("-", "\\-");
        escapedText = escapedText.replace("=", "\\=");
        escapedText = escapedText.replace("|", "\\|");
        escapedText = escapedText.replace("{", "\\{");
        escapedText = escapedText.replace("}", "\\}");
        escapedText = escapedText.replace(".", "\\.");
        escapedText = escapedText.replace("!", "\\!");
        return escapedText;
    }

    public static void main(String[] args) throws TelegramApiException {
        TelegramBotsApi botsApi = new TelegramBotsApi(DefaultBotSession.class);
        botsApi.registerBot(new EurometBot());
    }
}
